description = 'CodeFlux Common Android Stuff'
abbreviation = 'FLUXDROID'
group = 'com.teamcodeflux.android'
version = '0.6.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

def artifact = 'fluxdroid'
project.artifact = artifact

def isReleaseVersion = !version.endsWith('SNAPSHOT')

def compatibilityVersion = '1.6'
sourceCompatibility = compatibilityVersion
targetCompatibility = compatibilityVersion

repositories {
    mavenCentral()
    maven {
        url 'http://maven.springframework.org/milestone'
    }
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

configurations {
    provided
    provided.extendsFrom(compile)
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}

def androidVersion = '2.1.2'
def springAndroidVersion = '1.0.0.M4'
def jacksonMapperVersion = '1.8.5'
def androidAnnotationsVersion = '2.3-SNAPSHOT'
def robolectricVersion = '1.0'
def junitVersion = '4.10'
def mockitoVersion = '1.8.5'

dependencies {
    provided "com.google.android:android:$androidVersion"
    provided "org.springframework.android:spring-android-rest-template:$springAndroidVersion"
    provided "org.codehaus.jackson:jackson-mapper-asl:$jacksonMapperVersion"
    provided "com.googlecode.androidannotations:androidannotations:$androidAnnotationsVersion:api"
    provided "com.pivotallabs:robolectric:$robolectricVersion"
    provided "junit:junit:$junitVersion"
    testCompile "org.mockito:mockito-all:$mockitoVersion"
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true

        scopes.PROVIDED.plus += configurations.provided
    }
    project {
        javaVersion = compatibilityVersion
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            //repository(url: 'file:///maven/release')
            pom.project(pomConfiguration)

            beforeDeployment { deployment ->
                signPom(deployment)
            }

            def repositoryUsername = project.hasProperty('sonatypeUsername') ? sonatypeUsername : ''
            def repositoryPassword = project.hasProperty('sonatypePassword') ? sonatypePassword : ''

            if (isReleaseVersion) {
                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
            } else {
                repository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: repositoryUsername, password: repositoryPassword)
                }
            }
        }
    }
}

javadoc {
    classpath += configurations.provided
}

jar {
    baseName = artifact
}

signing {
    if (isReleaseVersion) {
        sign configurations.archives
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    baseName = artifact
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    baseName = artifact
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task generatePom << {
    def generatedPomFileName = 'pom.xml'

    pom {
        project(pomConfiguration)
    }.writeTo("$buildDir/$generatedPomFileName")
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def getPomConfiguration() {
    return {
        groupId project.group
        artifactId project.artifact
        version project.version
        packaging 'jar'
        name 'FluxDroid'
        description 'CodeFlux Common Android Stuff.'
        url 'https://github.com/codeflux/fluxdroid'
        licenses {
            license {
                name 'The Apache Software License, Version 2.0'
                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution 'repo'
            }
        }
        scm {
            url 'https://github.com/codeflux/fluxdroid'
            connection 'scm:git://github.com/codeflux/fluxdroid.git'
            developerConnection 'scm:git@github.com:codeflux/fluxdroid.git'
        }
        developers {
            developer {
                id 'ealden'
                name 'Ealden Esto E. Escanan'
                email 'ealden@teamcodeflux.com'
            }
            developer {
                id 'csgavino'
                name 'Carlos Samuel Gavino'
                email 'carlos.gavino@teamcodeflux.com'
            }
            developer {
                id 'jesschin'
                name 'Jess Malvin Chin'
                email 'jess@teamcodeflux.com'
            }
            developer {
                id 'jhun-magatas'
                name 'Jhun Mag-atas'
                email 'jhun@teamcodeflux.com'
            }
        }
    }
}

assemble.dependsOn clean

defaultTasks 'assemble'
